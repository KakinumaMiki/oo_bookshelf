参考にしたURLを示して、自分なりにまとめたポイントを文章で書いてみましょう。
a. オブジェクト指向
https://blog.codecamp.jp/object-orientation-explanation
https://medium-company.com/オブジェクト指向/#i
オブジェクト指向とは、プログラミング設計や実装の考え方の一つで、
オブジェクト（クラスやインスタンスなど）を作って、変更に対して対応しやすいようにコードを書くこと。
機能ごとに部品化することで、作業効率と保守性の向上を目的としている。

b. オブジェクト指向における「クラス」
https://www.rstone-jp.com/column/200831no2/
https://docs.pyq.jp/python/library/class.html
オブジェクト指向のプログラミングで使用する各々の「もの」の設計図のこと。
共通している属性をクラスとしてグルーピングしており、クラスは「変数」と「関数」の２つの情報をもつ。

c. オブジェクト指向における「継承」
https://www.rstone-jp.com/column/200831no2/
https://medium-company.com/オブジェクト指向/#i
「親」となるクラスの機能を「子」となるクラスが引き継いで使うこと。
また、クラスを別の製品の開発で再利用すること。

オブジェクト指向における「カプセル化」
https://medium-company.com/オブジェクト指向/#i
https://blog.codecamp.jp/object-orientation-explanation
オブジェクトが持つプロパティ（属性）などの情報を外部から直接書き換えられないように隠した状態のこと。
アクセス修飾子で、その機能を公開するのか、非公開にするのかを明確に制御できる。
カプセル化した機能をどのレベルまで公開するか明確にすることで、外部から想定外な使い方をされる心配はなく無駄な障害を防ぐことができる。

オブジェクト指向における「ポリモーフィズム」
https://blog.codecamp.jp/object-orientation-explanation
https://medium-company.com/オブジェクト指向/#i
https://jpazamu.com/polymorphism/
同じ命令をしても、クラスによって動作が異なること。
また、同じ処理で異なる動作を実現する考え方のこと。
呼び出した関数が呼び出し元のオブジェクトに適した振る舞いをすること。
コードを綺麗にまとめることができる。
プログラムの変更に強くなる。